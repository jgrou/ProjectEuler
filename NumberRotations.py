import math

ans = 0
limit = 100

for i in range(2, 10):
    for k in range(2, i+1):
        # Proper number rotations are generated by p(i/(10k-1)) https://oeis.org/A034089
        res = 0
        r = i
        den = 10*k - 1

        # reduce fraction
        gcd = math.gcd(r, den)
        r //= gcd
        den //= gcd
        
        Seen = den * [False]  # List of all rest terms we have seen
        
        while Seen[r] == False:
            Seen[r] = True
            r *= 10
            new_digit = r // den
            res = (10*res + new_digit)
            r %= den

        # Concatenations of generators also have the property
        n_digits = int(math.log(res,10)) + 1
        n_concatenations = limit // n_digits
        ans = (ans + n_concatenations * res) % 10**5
    
# For all repeated digits, this is trivially True
for digit_from_the_right in range(limit):  # Only care about last 5 digits
    ans = (ans + (45 * 10**(digit_from_the_right)) * (limit - max(digit_from_the_right,1))) % 10**5

print(ans)
